AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  ECSClusterName:
    Type: 'AWS::ECS::Cluster::Name'
    Description: Name of the Cluster
  VpcId:
    Type: 'AWS::EC2::VPC::Id'
    Description: A VPC that allows instances to access the Internet.
  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition::Family'
    Description: Task Definition name
  DesiredCount:
    Type: Number
    Default: 1
    Description: Number of instances to launch in the ECS cluster.
  AeroTargetGroupName:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup::Name'
    Description: Target Group.
  StrapiFileSystemId:
    Type: 'AWS::EFS::FileSystem::Id'
    Description: Select from a list of existing File Systems
  AeroECRRepo:
    Type: 'AWS::ECR::Repository::Name'
    Description: An ECR Repository where Docker images are pushed into
  StrapiALB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer::Name'
    Description: Select from a list of existing AWS Load Balancers
Resources:
  ECSCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: !Ref ECSClusterName
  EcsSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupName: 'ECS Security Group'
      Description: Security group for ECS instances
  EcsSecurityGroupALBports:
    Type: 'AWS::EC2::SecurityGroupIngress'
    Properties:
      GroupId: !GetAtt EcsSecurityGroup.GroupId
      IpProtocol: tcp
      FromPort: 1337
      ToPort: 1337
      CidrIp: 0.0.0.0/0
  CloudwatchLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref ECSLogGroup
      RetentionInDays: 30
  ECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      Family: strapi
      Cpu: '256'
      Memory: '512'
      NetworkMode: awsvpc
      ExecutionRoleArn: 'arn:aws:iam::306251499781:role/ecsTaskExecutionRole'
      ContainerDefinitions:
        - Name: frontend
          Image: '306251499781.dkr.ecr.us-gov-west-1.amazonaws.com/aero-strapi-ecr-imagerepo'
          Essential: true
          Memory: 512
          Cpu: 256
          PortMappings:
            - ContainerPort: 3000
      HealthCheck:
        Command:
          - CMD
          - curl
          - '--fail'
          - 'http://localhost:3000'
        Interval: 300
      Environment:
        - Name: AWS_REGION
          Value: 'US-Gov-West'
        - Name: NEXT_PUBLIC_STRAPI_API_URL
          Value: 'http://internal-lb-aero-wmd-apis-440038663.us-gov-west-1.elb.amazonaws.com:1337'
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSCluster
      DesiredCount: !Ref DesiredCount
      LaunchType: EC2
      TaskDefinition: !Ref ECSTaskDefinition
  MyRepository:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: !Ref AeroECRRepo
      RepositoryPolicyText:
        Version: 2012-10-17
        Statement:
          - Sid: AllowPushPull
            Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'ecr:GetDownloadUrlForLayer'
              - 'ecr:BatchGetImage'
              - 'ecr:BatchCheckLayerAvailability'
              - 'ecr:PutImage'
              - 'ecr:InitiateLayerUpload'
              - 'ecr:UploadLayerPart'
              - 'ecr:CompleteLayerUpload'
      LifecyclePolicy:
        Rules:
          - RulePriority: 1
            Description: Rule 1
            Selection:
              TagStatus: tagged
              TagPrefixList:
                - prod
              CountType: imageCountMoreThan
              CountNumber: 1
            Action:
              Type: expire
          - RulePriority: 2
            Selection:
              TagStatus: tagged
              TagPrefixList:
                - beta
              CountType: imageCountMoreThan
              CountNumber: 1
            Action:
              Type: expire
  MyRepositoryConfig:
    Type: 'AWS::ECR::Repository'
    Properties:
      RepositoryName: aero-strapi-ecr-imagerepo
      ImageScanningConfiguration:
        scanOnPush: false
Resources:
  MyLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      LoadBalancerName: !Ref StrapiALB
      SecurityGroups: [!Ref ALBSecurityGroup]
      Scheme: internet-facing
      Subnets:
        - !Ref MountTargetSubnetOne
        - !Ref MountTargetSubnetTwo
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Listeners:
        - Port: 80
          Protocol: HTTP
          DefaultActions:
            - Type: fixed-response
              FixedResponseConfig:
                ContentType: text/plain
                StatusCode: 200
                ContentType: 'OK'
  BackendTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: backend_TG
      Port: 1337
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      Matcher: 200-299
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 30
      HealthCheckPath: /_health
  FrontendTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: frontend_TG
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VpcId
      TargetType: ip
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 300
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 3
      Matcher: 200-299
      UnhealthyThresholdCount: 2
      HealthCheckTimeoutSeconds: 30
      HealthCheckPath: /_health
  BackendListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !GetAtt MyLoadBalancer.LoadBalancerArn
      Priority: 1
      Conditions:
        - Field: path-pattern
          Values:
            - /backend*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
  FrontendListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      ListenerArn: !GetAtt MyLoadBalancer.LoadBalancerArn
      Priority: 2
      Conditions:
        - Field: path-pattern
          Values:
            - /frontend*
      Actions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
  ALBSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: ALB Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
  BackendSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Backend Security Group
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 1337
          ToPort: 1337
          CidrIp: 0.0.0.0/0
Resources:
  MountTargetVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: MountTargetVPC
  MountTargetSubnetOne:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: us-gov-west-1a
  MountTargetSubnetTwo:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone: us-gov-west-1b
  FileSystemResource:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemId: !Ref StrapiFileSystemId
      FileSystemTags:
        - Key: Name
          Value: Aero-FileSystem
      BackupPolicy:
        Status: ENABLED
      Encrypted: true
  Policy:
    Type: 'AWS::IAM::ManagedPolicy'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: Statement
            Effect: Allow
            Principal: '*'
            Action:
              - 'elasticfilesystem:ClientMount'
              - 'elasticfilesystem:ClientRootAccess'
              - 'elasticfilesystem:ClientWrite'
            Resource: '*'
            Condition:
              Bool:
                'aws:SecureTransport': 'false'
  AccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !Ref StrapiFileSystemId
      PosixUser:
        Uid: '1000'
        Gid: '1000'
  ECSService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref ECSClusterName
      DesiredCount: 1
      EnableExecuteCommand: true
      LaunchType: EC2
      TaskDefinition: !Ref ECSTaskDefinition
      LoadBalancers:
        - TargetGroupArn: !Ref AeroTargetGroupName
          ContainerPort: 80
          ContainerName: Strapi-app

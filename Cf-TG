AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvType:
    Type: String
    Description: Environment type.
    Default: integ
    AllowedValues:
      - prod
      - integ
    ConstraintDescription: Must specify integ or prod.
  AppName:
    Type: String
    Description: Name of the project, include strapi. Ex. vep-hola-strapi
  AppDnsValue:
    Type: String
    Description: Host DNS of the application, e.g., vep.us.lmco.com
  AppPathValue:
    Type: String
    Description: Path attached to the DNS of the application, e.g., /hola
  DesiredTaskValue:
    Type: Number
    Default: 0
  Listener:
    Type: String
    Description: ARN of the listener.
  ListenerRulePriority:
    Type: Number
    Description: Enter a new rule priority; this cannot replace a priority rule.
  StrapiPostgresUser:
    Type: String
    Description: Found in Strapi's env file.
  StrapiPostgresPassword:
    Type: String
    Description: Found in Strapi's env file.
  StrapiPostgresDBName:
    Type: String
    Description: Found in Strapi's env file.
  StrapiApiTokenSalt:
    Type: String
    Description: Found in Strapi's env file.
  StrapiAppKey:
    Type: String
    Description: Found in Strapi's env file.
  StrapiJwtSecret:
    Type: String
    Description: Found in Strapi's env file.
  StrapiAdminJWTSecret:
    Type: String
    Description: Found in Strapi's env file.
  StrapiPublicUrl:
    Type: String
    Description: Found in Strapi's env file.
  WmdVpcId:
    Type: AWS::EC2::VPC::Id
    Description: A VPC that allows instances to access the Internet.
  RootDirectory:
    Type: String
    Default: "/my-custom-directory"
    Description: Root directory for EFS.

Conditions:
  ProdEnvironment: !Equals
    - !Ref EnvType
    - prod

Resources:
  StrapiECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref AppName
      ImageScanningConfiguration:
        scanOnPush: 'true'
      EncryptionConfiguration:
        EncryptionType: KMS
      # TODO: Define Lifecycle policy

  StrapiDbEfsAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !If ['ProdEnvironment', 'fs-0b98d8dfbef01082d', 'fs-0f38df377a61b730a']
      RootDirectory:
        CreationInfo:
          OwnerGid: 1000
          OwnerUid: 1000
          Permissions: '0777'
        Path: !Sub "/${AppName}-db"
      AccessPointTags:
        - Key: "Project"
          Value: !Ref AppName
        - Key: "Name"
          Value: !Sub "${AppName}-db"
        - Key: "ENV"
          Value: !If [ProdEnvironment, "Production", "Integration"]

  StrapiMediaEfsAccessPoint:
    Type: 'AWS::EFS::AccessPoint'
    Properties:
      FileSystemId: !If [ProdEnvironment, 'fs-0b98d8dfbef01082d', 'fs-0f38df377a61b730a']
      RootDirectory:
        CreationInfo:
          OwnerGid: 1000
          OwnerUid: 1000
          Permissions: '0777'
        Path: !Sub "/${AppName}-media"
      AccessPointTags:
        - Key: "Project"
          Value: !Ref AppName
        - Key: "Name"
          Value: !Sub "${AppName}-media"
        - Key: "ENV"
          Value: !If [ProdEnvironment, "Production", "Integration"]

  EfsCustomResource:
    Type: Custom::EfsCustomResource
    Properties:
      ServiceToken: arn:aws-us-gov:lambda:us-gov-west-1:306251499781:function:RootDirectory_AutoAssign_Function
      EfsFileSystemId: !If [ProdEnvironment, 'fs-0b98d8dfbef01082d', 'fs-0f38df377a61b730a']
      RootDirectory: !Ref RootDirectory

  StrapiEC2TargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: !Sub 'ecs-${EnvType}-${AppName}'
      Port: 443
      Protocol: 'HTTPS'
      ProtocolVersion: 'HTTP1'
      TargetType: 'instance'
      VpcId: !Ref WmdVpcId
      HealthCheckEnabled: true
      HealthCheckPath: '/healthCheck'
      HealthCheckPort: 'traffic-port'
      HealthCheckProtocol: 'HTTPS'
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5

  StrapiALBListenerRule:
    Type: 'AWS::ElasticLoadBalancingV2::ListenerRule'
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref StrapiEC2TargetGroup
      Conditions:
        - Field: host-header
          HostHeaderConfig:
            Values:
              - !Ref AppDnsValue
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - !Ref AppPathValue
      ListenerArn: !Ref Listener
      Priority: !Ref ListenerRulePriority

  StrapiECSTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
        - Name: nginx
          Image: !Sub '306251499781.dkr.ecr.us-gov-west-1.amazonaws.com/${AppName}:nginx-integ'
          Cpu: 0
          MemoryReservation: 128
          Links:
            - strapi
          PortMappings:
            - ContainerPort: 443
              HostPort: 0
              Protocol: tcp
          Essential: true
          EntryPoint: []
          Command: []
          Environment: []
          MountPoints: []
          VolumesFrom: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${AppName}-${EnvType}'
              awslogs-region: us-gov-west-1
              awslogs-stream-prefix: ecs
              awslogs-create-group: true

        - Name: db
          Image: '306251499781.dkr.ecr.us-gov-west-1.amazonaws.com/postgres:12.0-alpine'
          Cpu: 0
          MemoryReservation: 256
          PortMappings:
            - ContainerPort: 5432
              HostPort: 0
              Protocol: tcp
          Essential: true
          EntryPoint: []
          Command: []
          Environment:
            - Name: POSTGRES_USER
              Value: !Ref StrapiPostgresUser
            - Name: POSTGRES_PASSWORD
              Value: !Ref StrapiPostgresPassword
            - Name: POSTGRES_DB
              Value: !Ref StrapiPostgresDBName
          MountPoints:
            - SourceVolume: DB
              ContainerPath: /var/lib/postgresql/data/
          VolumesFrom: []
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${AppName}-${EnvType}'
              awslogs-region: us-gov-west-1
              awslogs-stream-prefix: ecs
              awslogs-create-group: true
          HealthCheck:
            Command:
              - CMD-SHELL
              - !Sub 'pg_isready -d ${StrapiPostgresDBName} -U ${StrapiPostgresUser}'
            Interval: 15
            Timeout: 30
            Retries: 3

        - Name: strapi
          Image: !Sub '306251499781.dkr.ecr.us-gov-west-1.amazonaws.com/${AppName}:integ'
          Cpu: 0
          MemoryReservation: 128
          Links:
            - db
          PortMappings:
            - ContainerPort: 1337
              HostPort: 0
              Protocol: tcp
          Essential: true
          EntryPoint: []
          Command: []
          Environment:
            - Name: API_TOKEN_SALT
              Value: !Ref StrapiApiTokenSalt
            - Name: DATABASE_NAME
              Value: !Ref StrapiPostgresDBName
            - Name: PORT
              Value: '1337'
            - Name: DATABASE_HOST
              Value: db
            - Name: DATABASE_PORT
              Value: '5432'
            - Name: HOST
              Value: 0.0.0.0
            - Name: PUBLIC_ADMIN_URL
              Value: /admin/
            - Name: DATABASE_CLIENT
              Value: postgres
            - Name: APP_KEYS
              Value: !Ref StrapiAppKey
            - Name: JWT_SECRET
              Value: !Ref StrapiJwtSecret
            - Name: ADMIN_JWT_SECRET
              Value: !Ref StrapiAdminJWTSecret
            - Name: PUBLIC_URL
              Value: !Ref StrapiPublicUrl
            - Name: DATABASE_USERNAME
              Value: !Ref StrapiPostgresUser
            - Name: NODE_ENV
              Value: !If [ProdEnvironment, "production", "development"]
            - Name: DATABASE_PASSWORD
              Value: !Ref StrapiPostgresPassword
          MountPoints:
            - SourceVolume: Media
              ContainerPath: /opt/app/public/uploads/
          VolumesFrom: []
          DependsOn:
            - ContainerName: db
              Condition: HEALTHY
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Sub '/ecs/${AppName}-${EnvType}'
              awslogs-region: us-gov-west-1
              awslogs-stream-prefix: ecs
              awslogs-create-group: true

      ExecutionRoleArn: 'arn:aws-us-gov:iam::306251499781:role/ecsTaskExecutionRole'
      TaskRoleArn: 'arn:aws-us-gov:iam::306251499781:role/ecsTaskExecutionRole'
      Family: !Sub '${AppName}-${EnvType}'
      Memory: 512
      NetworkMode: bridge
      RequiresCompatibilities:
        - EC2
      Volumes:
        - Name: DB
          EFSVolumeConfiguration:
            FilesystemId: !If [ProdEnvironment, 'fs-0b98d8dfbef01082d', 'fs-0f38df377a61b730a']
            RootDirectory: /
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref StrapiDbEfsAccessPoint
              IAM: ENABLED
        - Name: Media
          EFSVolumeConfiguration:
            FilesystemId: !If [ProdEnvironment, 'fs-0b98d8dfbef01082d', 'fs-0f38df377a61b730a']
            RootDirectory: /
            TransitEncryption: ENABLED
            AuthorizationConfig:
              AccessPointId: !Ref StrapiMediaEfsAccessPoint
              IAM: ENABLED

  StrapiECSServiceDefinition:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - StrapiALBListenerRule
    Properties:
      Cluster: !If [ProdEnvironment, 'wmd-prod-cluster', 'wmd-integ-cluster']
      TaskDefinition: !Ref "StrapiECSTaskDefinition"
      ServiceName: !Ref AppName
      SchedulingStrategy: "REPLICA"
      DesiredCount: !Ref DesiredTaskValue
      PlacementStrategies:
        - Type: binpack
          Field: memory
      LoadBalancers:
        - TargetGroupArn: !Ref StrapiEC2TargetGroup
          ContainerName: nginx
          ContainerPort: 443

AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for Strapi with Application Load Balancer (ALB) and EFS

Parameters:
  VPCId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID where resources will be created
  Subnet1:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID for the first availability zone
  Subnet2:
    Type: AWS::EC2::Subnet::Id
    Description: Subnet ID for the second availability zone

Resources:
  # Define the Application Load Balancer (ALB)
  StrapiALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      Tags:
        - Key: Name
          Value: StrapiALB

  # Define the frontend target group
  StrapiFrontEndTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: StrapiFrontEndTG
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPCId
      HealthCheckProtocol: HTTP
      HealthCheckPath: /  # Adjust the path as needed
      TargetType: ip
      Targets: []

  # Define the backend target group
  StrapiBackEndTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: StrapiBackEndTG
      Port: 1337
      Protocol: HTTP
      VpcId: !Ref VPCId
      HealthCheckProtocol: HTTP
      HealthCheckPath: /_health  # Adjust the path as needed
      TargetType: ip
      Targets: []

  # Define the backend listener
  BackendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref StrapiBackEndTG
      LoadBalancerArn: !Ref StrapiALB
      Port: 1337
      Protocol: HTTP

  # Define the frontend listener
  FrontendListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref StrapiFrontEndTG
      LoadBalancerArn: !Ref StrapiALB
      Port: 80
      Protocol: HTTP

  # Define the ALB security group
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: ALBSecurityGroup
      Description: ALB Security Group
      VpcId: !Ref VPCId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0  # Adjust IP range as needed

  # Define the EFS file system
  StrapiEFS:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose
      Encrypted: true
      LifecyclePolicies:
        - TransitionToIA: AFTER_14_DAYS
      Tags:
        - Key: Name
          Value: StrapiEFS

  # Define mount targets for EFS in both subnets
  EFSMountTarget1:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref StrapiEFS
      SubnetId: !Ref Subnet1
      SecurityGroups:
        - !Ref ALBSecurityGroup

  EFSMountTarget2:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref StrapiEFS
      SubnetId: !Ref Subnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup

  # Define EFS Access Point for Media
  StrapiMediaAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref StrapiEFS
      PosixUser:
        Uid: '1001'
        Gid: '1001'
      RootDirectory:
        Path: /media

  # Define EFS Access Point for DB
  StrapiDBAccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref StrapiEFS
      PosixUser:
        Uid: '1001'
        Gid: '1001'
      RootDirectory:
        Path: /db

Outputs:
  ALBURL:
    Description: URL of the Application Load Balancer
    Value: !GetAtt StrapiALB.DNSName

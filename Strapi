const response = require('cfn-response');
const aws = require('aws-sdk');
const efs = new aws.efs({ region: 'us-gov-west-1' });

exports.handler = async (event, context) => {
  console.log('Received event:', JSON.stringify(event, null, 2)); // Fixed missing closing parenthesis

  try {
    if (event.RequestType === 'Create' || event.RequestType === 'Update') {
      const rootDirectory = event.ResourceProperties.RootDirectory;
      const fileSystemId = ['fs-0b98d8dfbef01082d', 'fs-0f38df377a61b730a']; // Fixed array syntax

      // Create the EFS mount target
      const mountTargetParams = {
        FileSystemId: fileSystemId[0], // Choose the desired file system ID from the array
      };

      const mountTargetData = await efs.createMountTarget(mountTargetParams).promise();

      // Create the root directory
      const directoryParams = {
        FileSystemId: fileSystemId[1], // Choose the desired file system ID from the array
        Path: rootDirectory,
      };

      const directoryData = await efs.createAccessPoint(directoryParams).promise();

      // Send a SUCCESS response back to CloudFormation
      response.send(event, context, response.SUCCESS, {
        MountTargetId: mountTargetData.MountTargetId,
        AccessPointId: directoryData.AccessPointId,
      });
    } else if (event.RequestType === 'Delete') {
      // No need to do anything specific during stack deletion.
      response.send(event, context, response.SUCCESS);
    } else {
      // For unexpected RequestTypes, send a FAILED response.
      response.send(event, context, response.FAILED, {});
    }
  } catch (err) {
    console.log('Error:', err);
    // Send a FAILED response in case of an error.
    response.send(event, context, response.FAILED, {});
  }
};
